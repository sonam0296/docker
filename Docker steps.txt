First create Docker file named as "Dockerfile" 

Run command "docker build ." in the project folder it will create image id

Run command "docker run -p 3000:3000 image id" also specify the port where the server will run and the container will run


FROM node:14

WORKDIR /server

COPY package.json .

RUN npm install

COPY . .

EXPOSE 3000

CMD [ "node", "server.js" ]


docker run -dit --name repd -e CHOKIDAR_USEPOLLING=true -p 3003:3000 --mount type=bind,source=C:/Users/sonamj/Desktop/repd,target=/work node

docker run -d -it --name node-app -p 8000:8000 --mount type=bind,source=D:/org_kra/node,target=/example -v /example/node_modules node


docker run -dit --name repd -e CHOKIDAR_USEPOLLING=true -p 3003:3000 --mount type=bind,source=C:/Users/sonamj/Desktop/repd,target=/work node

docker exec -it REPD //bin//sh  ==>> to see the container folder structure

// build docker image with tag name -- image:v1
docker build -t image:v1 .

// run the docker image in background and give the container name
docker run -dit --name myapp -p 3000:3000 <img-id>

// see the logs of the running container
docker logs <container-name>


// Named Volume
docker run -dit -p 3000:80 --name FEEDBACK-VOLUME --rm -v feedback:/app/feedback 3ae7e50c5b4d
docker volume ls // shows the list of volumes

// Bind mount
docker run -dit -p 3000:80 --name FEEDBACK-VOLUME --rm -v feedback:/app/feedback -v "D:/Docker/data-volumes-01-starting-setup:/app" 3ae7e50c5b4d

docker run -dit -p 3000:80 --rm --name FEEDBACK-VOLUME -v feedback:/app/feedback -v "D:/Docker/data-volumes-01-starting-setup:/app" -v /app/node_modules 3ae7e50c5b4d 

// refresh node server with help of nodemon
docker run -dit -p 3000:80 -e CHOKIDAR_USEPOLLING=true --rm --name FEEDBACK-VOLUME -v feedback:/app/feedback -v "D:/Docker/data-volumes-01-starting-setup:/app" -v /app/node_modules 48ebdca9d3de


// Volume read-only 
docker run -dit -p 3000:80 -e CHOKIDAR_USEPOLLING=true --rm --name FEEDBACK-VOLUME -v feedback:/app/feedback -v "D:/Docker/data-volumes-01-starting-setup:/app:ro" -v /app/node_modules 48ebdca9d3de

// 2types of volumes --
1. Anonymous Volume =>>  docker run -v /app/data ......
2. Named Volume =>> To persist the data ==>> docker run -v data:/app/data ......
3. Bind Mount =>> Persist and reflect the changes ==>>> docker run -v /path-to-code:/app/data .....  ===>> Docker does not manage it


We do not use bind mount on the production as it will not have the particular path and also we don't do changes which should be reflcted

We only use bind mount for development purpose so that if we do any changes it gets reflected

// ENV & ARGuments

// --env or -e 
docker run -dit -p 3000:3002 -e CHOKIDAR_USEPOLLING=true --rm --name FEEDBACK-VOLUME-ENV --env PORT=3002 -v feedback:/app/feedback -v "D:/Docker/Node_dockerize:/app" -v /app/node_modules 255740a21dd4e3c3598e5536c6c23a09d1af208a32284a36531dd2d7182abf4a

// env file
docker run -dit -p 3000:3002 -e CHOKIDAR_USEPOLLING=true --rm --name FEEDBACK-VOLUME-ENV --env-file ./.env -v feedback:/app/feedback -v "D:/Docker/Node_dockerize:/app" -v /app/node_modules 255740a21dd4e3c3598e5536c6c23a09d1af208a32284a36531dd2d7182abf4a

// we use Args in cmd to lock server with certain value
docker build -t node-env:dev-arg --build-arg DEFAULT_PORT=8000 .